
****************************************************************
****************************************************************
*  This is an improved version of V2.0 only for LINUX system   *
*      a more definite way for the generator to be used        *
*         under the LINUX is provided.---BCVEGPY2.1            *
****************************************************************
****************************************************************
*
*the explain for all the parameters can be found in README-OLD
*      and have the same meanding as previous version.
*
****************************************************************
----------------------------------------------------------------
****************************************************************

0) some of the old files are rearranged and cut into several smaller
   files, and all the files are renamed as (.F) files. in some
   files they have an prefix (up=user process), which are used
   to avoid possible confusion with inner pythia subroutines.

   Note: all the files are ( .F ) files, especially for files that
   include some header files, they should be with surffix (.F) other
   than (.f). Some times these files (.F) will be transformed under 
   Windows system to be (.f), so you need manually transform 
   them back.---this is only a subtle point and if you are always
   in linux system, such problem will not occur.

1) parameters are set in parameter.F, you should change the values
   to your favorate one in this file.
   all the generated gride are put in the folder (data) with suffix
   .grid and all the generated intermediate running information
   (including the total-cross section information) are put in the
   folder (data) with suffix .cs and all the generated distributions
   (include pt-distribution and etc.) are put in the folder (data) 
   with suffix .dat . 

2) bcvegpy.F is the main program.

3) all other subdirectory include files to finish the function as 
   its namestands. And for convenience each subdirectory includes 
   a makefile. An overall makefile is put in the parent directory
   to automatically compile all the files and make an excutable
   file (run). By using makefile, all the files that hasn't been 
   changed does not need to be compiled again. Also once the lib 
   files (.a) have been generated, it also need not to be generated
   again. So time are saved according to this way ! It is for this
   reason, we put totfun.F in (pwave), and then all the subdirectory
   makefile can be used to generate a lib (*.a) seperately with its 
   name (*) equals to the name of that subdirectory.

   0) in the current directory:
      run.F bcvegpy.F(main program) parameter.F invegas.h
      for convenience, some not frequently used parameters are define
      in run.F: NUMOFEVENTS, ENERGYOFTEVA and ENERGYOFLHC.

   A) (generate)----> generate.a
      purpose: for generating the events
      files  : colorflow.F evntinit.F genevnt.F initmixgrade.F
               outerpdf.F py6208.F totfun.F inclcon.h invegas.h

   B) (phase)------> phase.a
      purpose: for generating the phase-space
      files  : phase_gen.F phase_point.F vegas.F invegas.h

   C) (pybook)-----> pybook.a
      purpose: for histogramming the received data
      files  : pybookinit.F uphistrange.F uppydump.F uppyfact.F uppyfill.F

   D) (system)-----> system.a
      purpose: open or close files to record the data and some logos
      files  : updatafile.F upopenfile.F upclosepyfile.F 
               upclosegradefile.F uplogo.F vegaslogo.F invegas.h

   E) (swave)------> swave.a
      purpose: calculate the square of the amplitude for s-wave states
      files  : s_bound.F s_free.F s_common.F s_foursets.F s_samp.F

   F) (pwave) ----> pwave.a
      purpose: calculate the square of the amplitude for p-wave states
      files  : inclamp.h inclcon.h inclppp.h
               p1p1amp.F pj0amp.F pj1amp.F pj2amp.F p_samp.F p_lorentz.F

   G) (setparameter)-> setparameter.a
      purpose: to set the parameter values from the value of parameter.F
      files  : simparameter.F uperror.F inclcon.h

   H) (data)
      purpose: all the obtained data-files are put here.

4) a sample executable file (do) is provided, which does all the works automatically.

5) one way to generating the mixed events are added:

   A) the original way: using vegas first and then generating events
      IVEGASOPEN=1, IMIX=1, no matthe IGRADE=0 or 1

   B) the second way: not using vegas but using previous generated grade
      IVEGASOPEN=0, IMIX=1, IGRADE=1.

6) the number bin used by VEGAS now can be adjusted by setting the value of
   NVEGBIN (in the header file invegas.h). with a higher value for NVEGBIN,
   the precision of the results might be improved.

7) some typo errors for the original version are listed in the following:

   A) in old bcvegpy.for: line 493-507: the value for MSTU(112) and 
      PARU(112) should exchange their values. line 212: the IMIXTYPE=1
      should be changed to IMIXTYPE=3.

   B) in old genevnt.for: line 505: the original ICOLUP(1,3)=503 should
      be changed to ICOLUP(1,4)=503.

   C) in old parameter.for: for all the three subroutines, we should add
      one statement:  double complex colmat, bundamp; in subroutine 
      setparameter, in calling setctq6, the original setctq6(3) should be
      changed to setctq6(4), which is right one that corresponds to CTEQ6L1.

8) to run the generator, the following two ways are OK.

   A) >make
      >./run
   B) >./do

Have fun !

Xing-Gang Wu
April 6, 2006 
